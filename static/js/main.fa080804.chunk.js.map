{"version":3,"sources":["components/Main.js","App.js","serviceWorker.js","index.js"],"names":["components_Main","Main","react_default","a","createElement","Fragment","href","className","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OAEeA,EAAA,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,oFACyEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,wBAAR,UADzE,KAGAJ,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIG,UAAU,WACZL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,mCAAR,YACJJ,EAAAC,EAAAC,cAAA,cAAKF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,iCAAR,WACLJ,EAAAC,EAAAC,cAAA,cAAKF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,2CAAR,eAKTJ,EAAAC,EAAAC,cAAA,wBAEAF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,yNAIFF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,wNACAF,EAAAC,EAAAC,cAAA,4HAKFF,EAAAC,EAAAC,cAAA,uBAEAF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,wTACAF,EAAAC,EAAAC,cAAA,mGAA0FF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,sCAAR,UAG5FJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,kMAGFF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,kJACAF,EAAAC,EAAAC,cAAA,wGAA+FF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,8CAAR,QAA/F,KAEAJ,EAAAC,EAAAC,cAAA,kMAAyLF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,wCAAR,QAAzL,QCzCOE,mLANX,OACEN,EAAAC,EAAAC,cAACJ,EAAD,aAHYS,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECTNC,IAASC,OACPd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAD,OAEFC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fa080804.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default Main => {\n  return (\n    <>\n      <h1>\n        Hey, I'm Abi. I'm currently living in Paris as full stack developer at <a href=\"https://govirtuo.com\">virtuo</a>.\n      </h1>\n      <h3>Contact me!</h3>\n\n      <div >\n        <ul className=\"contact\">\n          <li><a href=\"https://twitter.com/abijsummers\">Twitter</a></li>\n          <li> <a href=\"https://github.com/abisummers\">Github</a></li>\n          <li> <a href=\"https://www.linkedin.com/in/abisummers/\">Linkedin</a></li>\n        </ul>\n      </div>\n\n\n      <h3>Experience</h3>\n\n      <div className=\"background-box\">\n        <h4>Virtuo</h4>\n        <p>I'm currently a full stack deleloper at virtuo using node and react. Responsibilites include analysing and identifying bug, modifiying internal tools, documentation and improving the customer experience.</p>\n      </div>\n\n\n      <div className=\"background-box\">\n        <h4>Web Dev teaching assistant</h4>\n        <p>I spent 10 months working at Ironhack Paris as a teaching assistant. During this time I helped over 50 students learn to code from the very basics. We covered HTML, CSS, node, express, mongoDB and React.</p>\n        <p>At the end of the 9 week bootcamp, most students were able to find a full time position working as a developer</p>\n      </div>\n\n\n\n      <h3>Workshops</h3>\n\n      <div className=\"background-box\">\n        <h4>Intro to web development</h4>\n        <p>At Virtuo, I was able to give an internal talk about the basics of web development. We covered the basics of what the web is, why we create websites and what do we mean by web development. I also explained what HTML and CSS are and gave a short demo to explain what they do in relation to each other</p>\n        <p>I created the slides using mdx-deck and hosted the site on netlify which can be found  <a href=\"https://virtuo-webinar.netlify.app\">here</a></p>\n      </div>\n\n      <div className=\"background-box\">\n        <h4>Build ping pong using canvas</h4>\n        <p>During a two evening workshop (4 hours in total), I helped 20 people build a version of ping pong using canvas. Most of the people who attended the workshop has never coded before.</p>\n      </div>\n\n      <div className=\"background-box\">\n        <h4>Code me if you can</h4>\n        <p>While a TA at Ironhack, I did some short workshops in the evening for potential students, or those interested in learning how to code</p>\n        <p>The first workshop was a basic HTML and css site, hosted on github pages which can be found <a href=\"https://abisummers.com/code-me-if-you-can/\">here</a>.</p>\n\n        <p>The second workshop was similar to the first with the main difference being the styling. I was asked to put together a 'blog' like template for people interested in creating a blog. <a href=\"https://abisummers.com/code-me-blog/\">here</a>.</p>\n      </div>\n\n\n\n\n    </>\n  );\n};\n\n","import React, { Component } from \"react\";\n\nimport Main from \"./components/Main\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Main />\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}